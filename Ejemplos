/////////////////////1
/* Ejemplo del paquete testing*/

//En un archivo colocamos las funciones y todo el codigo que vamos implementar
package experimentos

func Suma(numero1, numero2 int) (resultado int) {
	//resultado = numero1 + numero2
	resultado = numero1 - numero2
	return
}

//En un archivo aparte, pero dentro de la misma carpeta, creamos un archivo importando el testing
//Llamando a la funcion con este formato:
/*
func Test_nombre(t *testing.T){
}
*/


package experimentos

import "testing"

func TestSuma(t *testing.T) {
	valor := Suma(7, 23)
	if valor != 30 {
		t.Error("Se esperaba 30 y se obtuvo", valor)
	}

}
//De esta forma podemos hacer pruebas a nuestro codigos.

/////////////////////////////////////////////////////////2

/*Ejemplo de combinaciones de string*/

package main

import "fmt"

//funcion que realiza la combinacion de las palabras, usando un mapa que va de enteros compuesto por strings
func combinaciones(A, B map[int]string) []string {
	var c []string
	for i:=0;i<len(A);i++{
		for j:=0;j<len(B);j++{
			c=append(c,A[i] + " " + B[j],B[j] + " " + A[i])
		}
	}
return c	
}

func main() {
	palabra1 := make(map[int]string)
	palabra2 := make(map[int]string)
	palabra1[0]="Arwin"
	//palabra1[1]="Julian"
	palabra2[0]="Trujillo"
	palabra2[1]="Ardila"
	
	fmt.Println(combinaciones(palabra1, palabra2))
}


//De esta forma se pueden realizar combinaciones entre objetos, se puede modificar para otro tipo de elementos.

///////////////////////////////////////3
/*Ejemplo de un numero entero aleatorio*/

//No resulta ser netamente aleatorio, pero utiliza la hora de tu ordenador la cual cambia y ayuda a la aleatoriedad.
package main

import (
    "fmt"
    "math/rand"
    "time"
)

// Returns an int >= min, < max
//Esta funcion arroja el numero aleatorio entre el rango establecido del minimo y maximo
func randomInt(min, max int) int {
    return min + rand.Intn(max-min)
}

func main() {
    rand.Seed(time.Now().UnixNano())//UnixNano convierte la hora actual de tu ordenador a un Unit64 par asi con rand.Seed generar el valor de forma aleatoria o casi aleatoria.
    fmt.Println(randomInt(1, 11)) //get an int in the 1...10 range
}

//////////////////////////////////////////////////////4
/*Ejemplo de generar una cadena de caracteres de forma aleatoria con el algoritmo del ejemplo 3*/

package main

import (
    "fmt"
    "math/rand"
    "time"
)

// Returns an int >= min, < max
//numero aleatorio entero
func randomInt(min, max int) int {
    return min + rand.Intn(max-min)
}

// Generate a random string of A-Z chars with len = l
func randomString(len int) string {
    bytes := make([]byte, len)
    for i := 0; i < len; i++ {
        bytes[i] = byte(randomInt(65, 90))
    }
    return string(bytes)
}

func main() {
    rand.Seed(time.Now().UnixNano())
    fmt.Println(randomString(10)) // print 10 chars
}
//////////////////////////5
/*Ejemplo de generar un numero aleatorio de tipo float64*/

package main

import (
	"fmt"
	"math/rand"
	"time"
)

// Returns an int >= min, < max
//Esta funcion arroja el numero aleatorio entre el rango establecido del minimo y maximo
func randomInt(min, max int) int {
	return min + rand.Intn(max-min)
}

func main() {
	var Random float64
	rand.Seed(time.Now().UnixNano()) //UnixNano convierte la hora actual de tu ordenador a un Unit64 para asi con rand.Seed generar el valor de forma aleatoria o casi aleatoria.
	Random = float64(randomInt(1, 5)) + rand.Float64() // se indican en el randomInt donde en que rango se desea el aleatorio.
	fmt.Println(Random)
}
//////////////////////////6
/*Ejemplo la estructura general para los test de cualquier prueba, se fundamenta en 3 aspectos principales 1.Tengo esto,2.Hice esto, 3.Debe pasar esto*/
func TestNombredelaprueba(t *testing.T) {

	Convey("Given a list of keywords", t, func() {

		Convey("When they are inserted", func() {

			Convey("They should be grouped by cost", func() {

			})
		})
	})
}
/////////////////////////7
/*Ejemplo de un test que abre un csv, lo lee, extrae las varibles del csv e inserta en una base de datos*/

func TestMariadb1(t *testing.T) {

	Convey("Given a list of keywords", t, func() {
		//abrimos el archivo
		file, _ := os.Open(os.Getenv("GOPATH") + "/src/github.com/entropyx/apolo/data/brandreport.csv")
		r := csv.NewReader(bufio.NewReader(file))

		count := 1

		for {
			//leemos el archivo
			record, err := r.Read()
			if err == io.EOF {
				break
			}
			//extraemos la data y convertimos a los valores correspondientes, entero,float,etc.
			//Nota ubicamos cada columna que corresponde.
			cost, _ := strconv.ParseFloat(record[5], 10)
			clicks, _ := strconv.ParseInt(record[6], 10, 64)
			impressions, _ := strconv.ParseInt(record[7], 10, 64)
			conversions, _ := strconv.ParseFloat(record[9], 10)
			totalconvervalue, _ := strconv.ParseFloat(record[10], 10)

			data := Keyword{
				KeywordText:          record[3],
				Cost:                 cost,
				Clicks:               int(clicks),
				Impressions:          int(impressions),
				Conversions:          conversions,
				TotalValueConversion: totalconvervalue,
			}

			Create(&data)

			count++
		}

	})

}
///////////////////////8/////////////////////
/*Comando para tener persente*/
new(nombre_struct) //inicializa en 0 y retorna un puntero del mismo.
////////////////////////////////9///////////////////////




